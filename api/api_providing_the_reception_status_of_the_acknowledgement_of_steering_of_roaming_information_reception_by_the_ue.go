/*
 * Nsoraf_SOR
 *
 * Nsoraf Steering Of Roaming Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"github.com/gin-gonic/gin"
	. "gitlabe2.ext.net.nokia.com/5g_core/sor-af/models"
	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/logger"
	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/producer"
	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/util"
	"net/http"
)

// SorAckInfo - SoR Acknowledgment Reception Notification
func HttpSorAckInfo(c *gin.Context) {
	logger.HandlerLog.Infof("SorAckInfo is called")
	/// <param name="supi type: string">Identifier of the UE</param>
	/// <param name="sorAckInfo type: SorAckInfo"></param>
	// Getting the path params
	supi := c.Params.ByName("supi")
	// get and parse body
	var sorAckInfo SorAckInfo
	if err := producer.GetDataFromRequestBody(c, &sorAckInfo); err != nil {
		problemDetail := "[Request Body] " + err.Error()
		title := "Malformed request syntax"
		var status int32 = http.StatusBadRequest
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.HttpLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
	}
	rsp := producer.HandleSorAckInfo(supi, sorAckInfo, c)

	// send response
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := util.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.HttpLog.Errorf("Serialize Response Body error: %+v", err)
		problemDetail := "[Request Body] " + err.Error()
		title := "Malformed request syntax"
		var status int32 = http.StatusBadRequest
		rsp := ProblemDetails{
			Title:  &title,
			Status: &status,
			Detail: &problemDetail,
		}
		logger.HttpLog.Errorln(problemDetail)
		c.JSON(http.StatusInternalServerError, rsp)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}
