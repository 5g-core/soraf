/*
 * Nsoraf_SOR
 *
 * Nsoraf Steering Of Roaming Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package producer

import (
	"net/http"

	"github.com/gin-gonic/gin"

	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/http2"
	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/logger"
	. "gitlabe2.ext.net.nokia.com/5g_core/sor-af/models"
	"gitlabe2.ext.net.nokia.com/5g_core/sor-af/util"
)

type InnerProblemDetails struct {
	Type   string `json:"type,omitempty" yaml:"type" bson:"type" mapstructure:"Type"`
	Title  string `json:"title,omitempty" yaml:"title" bson:"title" mapstructure:"Title"`
	Status int32  `json:"status,omitempty" yaml:"status" bson:"status" mapstructure:"Status"`
	Detail string `json:"detail,omitempty" yaml:"detail" bson:"detail" mapstructure:"Detail"`
	Cause  string `json:"cause,omitempty" yaml:"cause" bson:"cause" mapstructure:"Cause"`
}

func ProblemDetailsSystemFailure(detail string) *InnerProblemDetails {
	return &InnerProblemDetails{
		Title:  "System failure",
		Status: http.StatusInternalServerError,
		Detail: detail,
		Cause:  "SYSTEM_FAILURE",
	}
}

func ProblemDetailsMalformedReqSyntax(detail string) *InnerProblemDetails {
	return &InnerProblemDetails{
		Title:  "Malformed request syntax",
		Status: http.StatusBadRequest,
		Detail: detail,
	}
}

func SendResponse(c *gin.Context, rsp *http2.Response) {
	for k, v := range rsp.Header {
		// TODO: concatenate all values
		c.Header(k, v[0])
	}
	serializedBody, err := util.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.HttpLog.Errorf("Serialize Response Body error: %+v", err)
		pd := ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
	} else {
		c.Data(rsp.Status, "application/json", serializedBody)
	}
}

func GetDataFromRequestBody(c *gin.Context, data interface{}) error {
	reqBody, err := c.GetRawData()
	if err != nil {
		logger.HttpLog.Errorf("Get Request Body error: %+v", err)
		pd := ProblemDetailsSystemFailure(err.Error())
		c.JSON(http.StatusInternalServerError, pd)
		return err
	}

	err = util.Deserialize(data, reqBody, "application/json")
	if err != nil {
		logger.HttpLog.Errorf("Deserialize Request Body error: %+v", err)
		pd := ProblemDetailsMalformedReqSyntax(err.Error())
		c.JSON(http.StatusBadRequest, pd)
		return err
	}
	return err
}

func HandlePutSorInformation(supi string, sorInformationPrivision SorInformationPrivision, c *gin.Context) *http2.Response {
	logger.HttpLog.Errorf("HandlePutSorInformation is called")
	return http2.NewResponse(http.StatusNotImplemented, nil, map[string]interface{}{})
}

func HandleSorAckInfo(supi string, sorAckInfo SorAckInfo, c *gin.Context) *http2.Response {
	logger.HttpLog.Errorf("HandleSorAckInfo is called")
	return http2.NewResponse(http.StatusNotImplemented, nil, map[string]interface{}{})
}

func HandleGetSorInformation(supi string, plmnId []string, supportedFeatures []string, accessType []string, c *gin.Context) *http2.Response {
	logger.HttpLog.Errorf("HandleGetSorInformation is called, supi is %s", supi)

	for _, it := range plmnId {
		logger.HttpLog.Errorf("plmnid is %v", it)
	}

	for _, ac := range accessType {
		logger.HttpLog.Errorf("accessType is %v", ac)
	}

	return http2.NewResponse(http.StatusNotImplemented, nil, map[string]interface{}{})
}
